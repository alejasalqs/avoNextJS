{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n// Para extender el document creamos un archivo pages/_document.js\n// es importante mantener este nombre\n// es mejor buscar esto es custom documetn en la documentación de nextJS\n// https://nextjs.org/docs/advanced-features/custom-document\n\n/**\n * Orden de compilacion de nextJS\n * -Document\n *  -App\n *    - Nuestra App / pages\n */\nimport Document, { Html, Head, Main, NextScript } from \"next/document\";\n\nclass MyDocument extends Document {\n  /*static async getInitialProps(ctx) {\n    // para todas las páginas\n    const initialProps = await Document.getInitialProps(ctx);\n    return { ...initialProps };\n  }*/\n  // en la etiqueta <Main /> está la aplicación\n  // extender el document es util para añadir elementos externos a la aplicación\n  // como fuentes, css, js etc\n  render() {\n    return __jsx(Html, null, __jsx(Head, null), __jsx(\"body\", null, __jsx(Main, null), __jsx(NextScript, null)));\n  }\n\n}\n\nexport default MyDocument;\n/**\n * \n * Advertencias sobre extender el Document:\n\n    Ya que el Document se renderiza en servidor, los eventos como onClick no funcionarán.\n    Los componentes de React fuera de <Main /> no serán inicializados por el navegador. No añadir lógica de la aplicación aquí o CSS personalizado (como styled-jsx). Si necesita componentes compartidos en todas sus páginas (como un menú o una barra de herramientas).\n    getInitialPropsfunción de Document no se llama durante las transiciones del lado del cliente, ni cuando una página está optimizada estáticamente.\n * \n */","map":null,"metadata":{},"sourceType":"module"}