{"ast":null,"code":"import allData from \"./data\";\n\nclass Database {\n  constructor() {}\n\n  getAll() {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const asArray = Object.values(allData);\n        console.log(\"allDATA:\", asArray);\n        await randomDelay();\n        resolve(asArray);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  getById(id) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const avocade = Object.values(allData).find(avocade => avocade.id === id);\n        await randomDelay();\n        resolve(avocade);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n}\n\nconst randomDelay = () => new Promise(resolve => {\n  const max = 350;\n  const min = 100;\n  const delay = Math.floor(Math.random() * (max - min + 1)) + min;\n  setTimeout(resolve, delay);\n});\n\nexport default Database;","map":{"version":3,"sources":["/Volumes/HDD 1TB/Proyectos/React/next-js/database/db_helper.js"],"names":["allData","Database","constructor","getAll","Promise","resolve","reject","asArray","Object","values","console","log","randomDelay","error","getById","id","avocade","find","max","min","delay","Math","floor","random","setTimeout"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,QAApB;;AAEA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,GAAG,CAAE;;AAEhBC,EAAAA,MAAM,GAAG;AACP,WAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,UAAI;AACF,cAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcT,OAAd,CAAhB;AACAU,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBJ,OAAxB;AACA,cAAMK,WAAW,EAAjB;AACAP,QAAAA,OAAO,CAACE,OAAD,CAAP;AACD,OALD,CAKE,OAAOM,KAAP,EAAc;AACdP,QAAAA,MAAM,CAACO,KAAD,CAAN;AACD;AACF,KATM,CAAP;AAUD;;AAEDC,EAAAA,OAAO,CAACC,EAAD,EAAK;AACV,WAAO,IAAIX,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,UAAI;AACF,cAAMU,OAAO,GAAGR,MAAM,CAACC,MAAP,CAAcT,OAAd,EAAuBiB,IAAvB,CACbD,OAAD,IAAaA,OAAO,CAACD,EAAR,KAAeA,EADd,CAAhB;AAGA,cAAMH,WAAW,EAAjB;AACAP,QAAAA,OAAO,CAACW,OAAD,CAAP;AACD,OAND,CAME,OAAOH,KAAP,EAAc;AACdP,QAAAA,MAAM,CAACO,KAAD,CAAN;AACD;AACF,KAVM,CAAP;AAWD;;AA5BY;;AA+Bf,MAAMD,WAAW,GAAG,MAClB,IAAIR,OAAJ,CAAaC,OAAD,IAAa;AACvB,QAAMa,GAAG,GAAG,GAAZ;AACA,QAAMC,GAAG,GAAG,GAAZ;AACA,QAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,GAAG,GAAGC,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAA5D;AAEAK,EAAAA,UAAU,CAACnB,OAAD,EAAUe,KAAV,CAAV;AACD,CAND,CADF;;AASA,eAAenB,QAAf","sourcesContent":["import allData from \"./data\";\n\nclass Database {\n  constructor() {}\n\n  getAll() {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const asArray = Object.values(allData);\n        console.log(\"allDATA:\", asArray);\n        await randomDelay();\n        resolve(asArray);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  getById(id) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const avocade = Object.values(allData).find(\n          (avocade) => avocade.id === id\n        );\n        await randomDelay();\n        resolve(avocade);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\nconst randomDelay = () =>\n  new Promise((resolve) => {\n    const max = 350;\n    const min = 100;\n    const delay = Math.floor(Math.random() * (max - min + 1)) + min;\n\n    setTimeout(resolve, delay);\n  });\n\nexport default Database;\n"]},"metadata":{},"sourceType":"module"}